// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/supchaser/wb_l0/internal/app/models"
)

// MockAppRepository is a mock of AppRepository interface.
type MockAppRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAppRepositoryMockRecorder
}

// MockAppRepositoryMockRecorder is the mock recorder for MockAppRepository.
type MockAppRepositoryMockRecorder struct {
	mock *MockAppRepository
}

// NewMockAppRepository creates a new mock instance.
func NewMockAppRepository(ctrl *gomock.Controller) *MockAppRepository {
	mock := &MockAppRepository{ctrl: ctrl}
	mock.recorder = &MockAppRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRepository) EXPECT() *MockAppRepositoryMockRecorder {
	return m.recorder
}

// GetOrderByID mocks base method.
func (m *MockAppRepository) GetOrderByID(ctx context.Context, orderUID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockAppRepositoryMockRecorder) GetOrderByID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockAppRepository)(nil).GetOrderByID), ctx, orderUID)
}

// MockAppUsecase is a mock of AppUsecase interface.
type MockAppUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAppUsecaseMockRecorder
}

// MockAppUsecaseMockRecorder is the mock recorder for MockAppUsecase.
type MockAppUsecaseMockRecorder struct {
	mock *MockAppUsecase
}

// NewMockAppUsecase creates a new mock instance.
func NewMockAppUsecase(ctrl *gomock.Controller) *MockAppUsecase {
	mock := &MockAppUsecase{ctrl: ctrl}
	mock.recorder = &MockAppUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppUsecase) EXPECT() *MockAppUsecaseMockRecorder {
	return m.recorder
}

// GetOrderByID mocks base method.
func (m *MockAppUsecase) GetOrderByID(ctx context.Context, orderUID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockAppUsecaseMockRecorder) GetOrderByID(ctx, orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockAppUsecase)(nil).GetOrderByID), ctx, orderUID)
}
